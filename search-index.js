var N=null,E="",T="t",U="u",searchIndex={};
var R=["emulator","result","refcell","instruction","Instruction","usize","string","emulator::alu","try_from","borrow","borrow_mut","try_into","type_id","emulator::bus","typeid","emulator::cpu","emulator::instruction","to_owned","clone_into","default","ioregisters","formatter","IoRegisters","2i_emulator","Computer"];
searchIndex[R[23]]={"doc":E,"i":[[3,R[24],R[23],E,N,N],[3,"Program",E,E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[8],E,E,0,[[[U]],[R[1]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[1]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[[U]],[R[1]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[1]]]],[11,R[19],E,E,0,[[],["computer"]]]],"p":[[3,R[24]],[3,"Program"]]};
searchIndex[R[0]]={"doc":"This crate implements an emulator for the Minirechner 2i","i":[[4,"Error",R[0],E,N,N],[13,"Bus",E,E,0,N],[13,"Cpu",E,E,0,N],[13,R[4],E,E,0,N],[13,"Parse",E,E,0,N],[13,"Io",E,E,0,N],[0,"alu",E,"The 2i 8 bit alu.",N,N],[3,"Alu",R[7],"Alu of the 2i.",N,N],[3,"Flags",E,"Flags of the 2i.",N,N],[11,"calculate",E,"Execute an instruction with two operands on the alu.",1,[[["u8"],["bool"]]]],[11,"new",E,E,2,[[["bool"]],["flags"]]],[11,"carry",E,E,2,[[["self"]],["bool"]]],[11,"negative",E,E,2,[[["self"]],["bool"]]],[11,"zero",E,E,2,[[["self"]],["bool"]]],[0,"bus",R[0],"The 2i bus.",N,N],[3,"Ram",R[13],"Ram of the 2i.",N,N],[3,R[22],E,"IoRegisters of the 2i.",N,N],[8,"Bus",E,"Bus of the 2i.",N,N],[10,"read",E,E,3,[[["u8"],["self"]],[["u8"],[R[1],["u8"]]]]],[10,"write",E,E,3,[[["u8"],["self"]],[R[1]]]],[11,"new",E,"Create a new ram with all addresses initialised to zero.",4,[[],["ram"]]],[11,"inspect",E,"Direct access to the ram wrapped in a RefCell.",4,[[["self"]],[R[2]]]],[11,"add_overlay",E,"Add a bus as an overlay to the ram.",4,[[["self"],["u8"],["bus"]]]],[11,"new",E,"Create a new IoRegisters with all registers initialised to…",5,[[],[R[20]]]],[11,"inspect_input",E,"Direct access to the input registers wrapped in a RefCell.",5,[[["self"]],[R[2]]]],[11,"inspect_output",E,"Direct access to the output registers wrapped in a RefCell.",5,[[["self"]],[R[2]]]],[0,"cpu",R[0],"The 2i cpu.",N,N],[3,"Cpu",R[15],"Cpu of the 2i.",N,N],[11,"new",E,"Create a new cpu with all registers and flags set to zero.",6,[[],["cpu"]]],[11,"execute_instruction",E,"Execute the given instruction on the cpu using the given,…",6,[[[R[3]],["b"],["self"]],[R[1]]]],[11,"trigger_volatile_interrupt",E,"Enable the volatile interrupt (MAC 010) for the next…",6,[[["self"]]]],[11,"trigger_stored_interrupt",E,"Enable the stored interrupt (MAC 111) until used by any…",6,[[["self"]]]],[11,"inspect_registers",E,"Direct access to the registers.",6,[[["self"]]]],[11,"inspect_flags",E,"Direct access to the flag register.",6,[[["self"]],["flags"]]],[11,"check_volatile_interrupt",E,"Check if the volatile interrupt is active for the next…",6,[[["self"]],["bool"]]],[11,"check_stored_interrupt",E,"Check if the stored interrupt is active",6,[[["self"]],["bool"]]],[0,R[3],R[0],"The 2i instruction",N,N],[3,R[4],R[16],"Instruction of the 2i.",N,N],[11,"new",E,"Create a new Instruction from a u32. Fails if more than 25…",7,[[["u32"]],[[R[3]],[R[1],[R[3]]]]]],[11,"new_from_string",E,"Creat a new Instruction from a binary string (consisting…",7,[[["str"]],[[R[3]],[R[1],[R[3]]]]]],[11,"new_looping",E,E,7,[[[R[5]]],[[R[3]],[R[1],[R[3]]]]]],[11,"get_instruction",E,"Get the instruction as a 25 bit integer (the first 7 most…",7,[[["self"]],["u32"]]],[11,"should_store_flags",E,"MCHFLG",7,[[["self"]],["bool"]]],[11,"get_alu_instruction",E,"MALUS0-3 (4 bit)",7,[[["self"]],["u8"]]],[11,"is_alu_input_b_const",E,"MALUIB",7,[[["self"]],["bool"]]],[11,"is_alu_input_a_bus",E,"MALUIA",7,[[["self"]],["bool"]]],[11,"should_write_register",E,"MRGWE",7,[[["self"]],["bool"]]],[11,"should_write_register_b",E,"MRGWS",7,[[["self"]],["bool"]]],[11,"get_register_address_b",E,"MRGAB0-2 (3 bit)",7,[[["self"]],[R[5]]]],[11,"get_constant_input",E,"MRGAB0-3 (4 bit)",7,[[["self"]],["u8"]]],[11,"get_register_address_a",E,"MRGAA0-2 (3 bit)",7,[[["self"]],[R[5]]]],[11,"is_bus_enabled",E,"BUSEN",7,[[["self"]],["bool"]]],[11,"is_bus_writable",E,"BUSWR",7,[[["self"]],["bool"]]],[11,"get_next_instruction_address",E,"NA0-4 (5 bit)",7,[[["self"]],["u8"]]],[11,"get_address_control",E,"MAC0-1 (2 bit)",7,[[["self"]],["u8"]]],[11,"get_full_address_control",E,"MAC1-0 + NA0 (3 bit)",7,[[["self"]],["u8"]]],[11,"to_mnemonic",E,"Create a textual representation of the instruction",7,[[["option",[R[5]]],["self"],[R[5]]],[R[6]]]],[0,"parse",R[0],"Parse 2i programs.",N,N],[5,"read_program","emulator::parse","Parse 2i programs in string representation into arrays of…",N,[[["read"]],[R[1]]]],[5,"read_reachable_program",E,"Parse 2i programs in string representation and return only…",N,[[["read"]],[[R[1],["vec"]],["vec"]]]],[6,"Result",R[0],E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"to_string",E,E,0,[[["self"]],[R[6]]]],[11,R[8],E,E,0,[[[U]],[R[1]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[R[14]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[1]]]],[11,"from",R[7],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[[U]],[R[1]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[R[14]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[1]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[[T],["self"]]]],[11,R[8],E,E,2,[[[U]],[R[1]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[R[14]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[1]]]],[11,"from",R[13],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[8],E,E,4,[[[U]],[R[1]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[R[14]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[],[R[1]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[8],E,E,5,[[[U]],[R[1]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[R[14]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[],[R[1]]]],[11,"from",R[15],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[8],E,E,6,[[[U]],[R[1]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[R[14]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[],[R[1]]]],[11,"from",R[16],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[[T],["self"]]]],[11,R[8],E,E,7,[[[U]],[R[1]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,[[["self"]],[R[14]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[],[R[1]]]],[11,"read",R[13],E,4,[[["u8"],["self"]],[["u8"],[R[1],["u8"]]]]],[11,"write",E,E,4,[[["u8"],["self"]],[R[1]]]],[11,"read",E,E,5,[[["u8"],["self"]],[["u8"],[R[1],["u8"]]]]],[11,"write",E,E,5,[[["u8"],["self"]],[R[1]]]],[11,"eq",R[7],E,2,[[["self"],["flags"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["flags"]],["bool"]]],[11,"eq",R[16],E,7,[[[R[3]],["self"]],["bool"]]],[11,"ne",E,E,7,[[[R[3]],["self"]],["bool"]]],[11,"clone",R[7],E,2,[[["self"]],["flags"]]],[11,"clone",R[16],E,7,[[["self"]],[R[3]]]],[11,"from",R[0],E,0,[[["error"]],["self"]]],[11,R[19],R[7],E,2,[[],["flags"]]],[11,R[19],R[13],E,4,[[],["ram"]]],[11,R[19],E,E,5,[[],[R[20]]]],[11,R[19],R[15],E,6,[[],["cpu"]]],[11,R[19],R[16],E,7,[[],[R[3]]]],[11,"fmt",R[7],E,2,[[[R[21]],["self"]],[R[1]]]],[11,"fmt",R[16],E,7,[[[R[21]],["self"]],[R[1]]]],[11,"fmt",R[0],E,0,[[[R[21]],["self"]],[R[1]]]],[11,"fmt",E,E,0,[[[R[21]],["self"]],[R[1]]]]],"p":[[4,"Error"],[3,"Alu"],[3,"Flags"],[8,"Bus"],[3,"Ram"],[3,R[22]],[3,"Cpu"],[3,R[4]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);